import React, { useState, useEffect } from 'react';
import { Save, Plus, Trash2, Clock, MapPin, Award, BookOpen, Languages, Settings, CheckCircle, AlertCircle } from 'lucide-react';

interface Qualification {
  degree: string;
  institution: string;
  year: number;
  certification: string;
}

interface DayAvailability {
  available: boolean;
  startTime: string;
  endTime: string;
  maxBookings: number;
}

interface Availability {
  monday: DayAvailability;
  tuesday: DayAvailability;
  wednesday: DayAvailability;
  thursday: DayAvailability;
  friday: DayAvailability;
  saturday: DayAvailability;
  sunday: DayAvailability;
}

interface ProfileData {
  specializations: string[];
  qualifications: Qualification[];
  experience: number;
  biography: string;
  languages: string[];
  availability: Availability;
  isAcceptingBookings: boolean;
  consultationFee: number;
  officeLocation: {
    building: string;
    room: string;
    floor: string;
    additionalInfo: string;
  };
  contactInfo: {
    officePhone: string;
    emergencyContact: string;
    officeHours: string;
  };
  emergencyAvailable: boolean;
}\n\nconst CounsellorProfileSetup: React.FC = () => {\n  const [profile, setProfile] = useState<ProfileData>({\n    specializations: [],\n    qualifications: [{ degree: '', institution: '', year: new Date().getFullYear(), certification: '' }],\n    experience: 0,\n    biography: '',\n    languages: ['English'],\n    availability: {\n      monday: { available: false, startTime: '09:00', endTime: '17:00', maxBookings: 4 },\n      tuesday: { available: false, startTime: '09:00', endTime: '17:00', maxBookings: 4 },\n      wednesday: { available: false, startTime: '09:00', endTime: '17:00', maxBookings: 4 },\n      thursday: { available: false, startTime: '09:00', endTime: '17:00', maxBookings: 4 },\n      friday: { available: false, startTime: '09:00', endTime: '17:00', maxBookings: 4 },\n      saturday: { available: false, startTime: '09:00', endTime: '17:00', maxBookings: 2 },\n      sunday: { available: false, startTime: '09:00', endTime: '17:00', maxBookings: 2 }\n    },\n    isAcceptingBookings: true,\n    consultationFee: 0,\n    officeLocation: {\n      building: '',\n      room: '',\n      floor: '',\n      additionalInfo: ''\n    },\n    contactInfo: {\n      officePhone: '',\n      emergencyContact: '',\n      officeHours: 'Monday-Friday: 9:00 AM - 5:00 PM'\n    },\n    emergencyAvailable: false\n  });\n\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [newLanguage, setNewLanguage] = useState('');\n\n  const specializationOptions = [\n    { value: 'anxiety_disorders', label: 'Anxiety Disorders' },\n    { value: 'depression', label: 'Depression' },\n    { value: 'stress_management', label: 'Stress Management' },\n    { value: 'academic_pressure', label: 'Academic Pressure' },\n    { value: 'relationship_counseling', label: 'Relationship Counseling' },\n    { value: 'career_guidance', label: 'Career Guidance' },\n    { value: 'trauma_therapy', label: 'Trauma Therapy' },\n    { value: 'addiction_counseling', label: 'Addiction Counseling' },\n    { value: 'eating_disorders', label: 'Eating Disorders' },\n    { value: 'grief_counseling', label: 'Grief Counseling' },\n    { value: 'anger_management', label: 'Anger Management' },\n    { value: 'sleep_disorders', label: 'Sleep Disorders' },\n    { value: 'general_counseling', label: 'General Counseling' }\n  ];\n\n  const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\n  useEffect(() => {\n    fetchProfile();\n  }, []);\n\n  const fetchProfile = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('adminToken');\n      \n      const response = await fetch('http://localhost:3000/api/admin/counsellor/profile', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data) {\n          setProfile(prev => ({ ...prev, ...data }));\n        }\n      }\n    } catch (err) {\n      setError('Failed to load profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveProfile = async () => {\n    try {\n      setSaving(true);\n      setMessage('');\n      setError('');\n\n      const token = localStorage.getItem('adminToken');\n      \n      const response = await fetch('http://localhost:3000/api/admin/counsellor/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(profile)\n      });\n\n      if (response.ok) {\n        setMessage('Profile updated successfully!');\n        setTimeout(() => setMessage(''), 3000);\n      } else {\n        setError('Failed to update profile');\n      }\n    } catch (err) {\n      setError('Network error. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleSpecializationChange = (value: string, checked: boolean) => {\n    setProfile(prev => ({\n      ...prev,\n      specializations: checked \n        ? [...prev.specializations, value]\n        : prev.specializations.filter(s => s !== value)\n    }));\n  };\n\n  const addQualification = () => {\n    setProfile(prev => ({\n      ...prev,\n      qualifications: [...prev.qualifications, { degree: '', institution: '', year: new Date().getFullYear(), certification: '' }]\n    }));\n  };\n\n  const updateQualification = (index: number, field: keyof Qualification, value: string | number) => {\n    setProfile(prev => ({\n      ...prev,\n      qualifications: prev.qualifications.map((qual, i) => \n        i === index ? { ...qual, [field]: value } : qual\n      )\n    }));\n  };\n\n  const removeQualification = (index: number) => {\n    setProfile(prev => ({\n      ...prev,\n      qualifications: prev.qualifications.filter((_, i) => i !== index)\n    }));\n  };\n\n  const addLanguage = () => {\n    if (newLanguage.trim() && !profile.languages.includes(newLanguage.trim())) {\n      setProfile(prev => ({\n        ...prev,\n        languages: [...prev.languages, newLanguage.trim()]\n      }));\n      setNewLanguage('');\n    }\n  };\n\n  const removeLanguage = (language: string) => {\n    setProfile(prev => ({\n      ...prev,\n      languages: prev.languages.filter(l => l !== language)\n    }));\n  };\n\n  const updateAvailability = (day: string, field: keyof DayAvailability, value: any) => {\n    setProfile(prev => ({\n      ...prev,\n      availability: {\n        ...prev.availability,\n        [day]: {\n          ...prev.availability[day as keyof Availability],\n          [field]: value\n        }\n      }\n    }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <div className=\"text-center py-8\">Loading profile...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-8\">\n      <div className=\"bg-white rounded-xl shadow-lg p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Counsellor Profile Setup</h1>\n          <button\n            onClick={saveProfile}\n            disabled={saving}\n            className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            {saving ? 'Saving...' : 'Save Profile'}\n          </button>\n        </div>\n\n        {message && (\n          <div className=\"mb-4 p-3 bg-green-50 border border-green-200 text-green-700 rounded-lg flex items-center\">\n            <CheckCircle className=\"h-4 w-4 mr-2\" />\n            {message}\n          </div>\n        )}\n\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 text-red-700 rounded-lg flex items-center\">\n            <AlertCircle className=\"h-4 w-4 mr-2\" />\n            {error}\n          </div>\n        )}\n\n        {/* Specializations */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <Award className=\"h-5 w-5 mr-2\" />\n            Specializations\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n            {specializationOptions.map(option => (\n              <label key={option.value} className=\"flex items-center space-x-2 p-2 border rounded-lg hover:bg-gray-50\">\n                <input\n                  type=\"checkbox\"\n                  checked={profile.specializations.includes(option.value)}\n                  onChange={(e) => handleSpecializationChange(option.value, e.target.checked)}\n                  className=\"rounded border-gray-300\"\n                />\n                <span className=\"text-sm\">{option.label}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Biography */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <BookOpen className=\"h-5 w-5 mr-2\" />\n            Professional Biography\n          </h2>\n          <textarea\n            value={profile.biography}\n            onChange={(e) => setProfile(prev => ({ ...prev, biography: e.target.value }))}\n            placeholder=\"Write a brief professional biography that students will see...\"\n            className=\"w-full h-32 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            maxLength={1000}\n          />\n          <div className=\"text-xs text-gray-500 mt-1\">\n            {profile.biography.length}/1000 characters\n          </div>\n        </div>\n\n        {/* Experience */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Years of Experience</h2>\n          <input\n            type=\"number\"\n            value={profile.experience}\n            onChange={(e) => setProfile(prev => ({ ...prev, experience: parseInt(e.target.value) || 0 }))}\n            className=\"w-32 p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            min=\"0\"\n            max=\"50\"\n          />\n        </div>\n\n        {/* Qualifications */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <Award className=\"h-5 w-5 mr-2\" />\n              Qualifications\n            </h2>\n            <button\n              onClick={addQualification}\n              className=\"flex items-center px-3 py-1 text-sm bg-green-600 text-white rounded-lg hover:bg-green-700\"\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Add\n            </button>\n          </div>\n          <div className=\"space-y-4\">\n            {profile.qualifications.map((qual, index) => (\n              <div key={index} className=\"p-4 border border-gray-200 rounded-lg\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Degree/Certification\"\n                    value={qual.degree}\n                    onChange={(e) => updateQualification(index, 'degree', e.target.value)}\n                    className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Institution\"\n                    value={qual.institution}\n                    onChange={(e) => updateQualification(index, 'institution', e.target.value)}\n                    className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                  <input\n                    type=\"number\"\n                    placeholder=\"Year\"\n                    value={qual.year}\n                    onChange={(e) => updateQualification(index, 'year', parseInt(e.target.value))}\n                    className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Certification\"\n                      value={qual.certification}\n                      onChange={(e) => updateQualification(index, 'certification', e.target.value)}\n                      className=\"flex-1 p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                    {profile.qualifications.length > 1 && (\n                      <button\n                        onClick={() => removeQualification(index)}\n                        className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Languages */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <Languages className=\"h-5 w-5 mr-2\" />\n            Languages\n          </h2>\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {profile.languages.map((language, index) => (\n              <span key={index} className=\"flex items-center px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm\">\n                {language}\n                {profile.languages.length > 1 && (\n                  <button\n                    onClick={() => removeLanguage(language)}\n                    className=\"ml-2 text-blue-600 hover:text-blue-800\"\n                  >\n                    ×\n                  </button>\n                )}\n              </span>\n            ))}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"text\"\n              placeholder=\"Add language\"\n              value={newLanguage}\n              onChange={(e) => setNewLanguage(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && addLanguage()}\n              className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n            <button\n              onClick={addLanguage}\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            >\n              Add\n            </button>\n          </div>\n        </div>\n\n        {/* Availability */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <Clock className=\"h-5 w-5 mr-2\" />\n            Weekly Availability\n          </h2>\n          <div className=\"space-y-4\">\n            {days.map(day => {\n              const dayData = profile.availability[day as keyof Availability];\n              return (\n                <div key={day} className=\"p-4 border border-gray-200 rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <label className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        checked={dayData.available}\n                        onChange={(e) => updateAvailability(day, 'available', e.target.checked)}\n                        className=\"rounded border-gray-300\"\n                      />\n                      <span className=\"font-medium capitalize\">{day}</span>\n                    </label>\n                  </div>\n                  \n                  {dayData.available && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 ml-6\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Start Time</label>\n                        <input\n                          type=\"time\"\n                          value={dayData.startTime}\n                          onChange={(e) => updateAvailability(day, 'startTime', e.target.value)}\n                          className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">End Time</label>\n                        <input\n                          type=\"time\"\n                          value={dayData.endTime}\n                          onChange={(e) => updateAvailability(day, 'endTime', e.target.value)}\n                          className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">Max Bookings</label>\n                        <input\n                          type=\"number\"\n                          value={dayData.maxBookings}\n                          onChange={(e) => updateAvailability(day, 'maxBookings', parseInt(e.target.value) || 1)}\n                          min=\"1\"\n                          max=\"20\"\n                          className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Office Location */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <MapPin className=\"h-5 w-5 mr-2\" />\n            Office Location\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <input\n              type=\"text\"\n              placeholder=\"Building Name\"\n              value={profile.officeLocation.building}\n              onChange={(e) => setProfile(prev => ({\n                ...prev,\n                officeLocation: { ...prev.officeLocation, building: e.target.value }\n              }))}\n              className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Room Number\"\n              value={profile.officeLocation.room}\n              onChange={(e) => setProfile(prev => ({\n                ...prev,\n                officeLocation: { ...prev.officeLocation, room: e.target.value }\n              }))}\n              className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Floor\"\n              value={profile.officeLocation.floor}\n              onChange={(e) => setProfile(prev => ({\n                ...prev,\n                officeLocation: { ...prev.officeLocation, floor: e.target.value }\n              }))}\n              className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Additional Info\"\n              value={profile.officeLocation.additionalInfo}\n              onChange={(e) => setProfile(prev => ({\n                ...prev,\n                officeLocation: { ...prev.officeLocation, additionalInfo: e.target.value }\n              }))}\n              className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n          </div>\n        </div>\n\n        {/* Contact Information */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Contact Information</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <input\n              type=\"tel\"\n              placeholder=\"Office Phone\"\n              value={profile.contactInfo.officePhone}\n              onChange={(e) => setProfile(prev => ({\n                ...prev,\n                contactInfo: { ...prev.contactInfo, officePhone: e.target.value }\n              }))}\n              className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n            <input\n              type=\"tel\"\n              placeholder=\"Emergency Contact\"\n              value={profile.contactInfo.emergencyContact}\n              onChange={(e) => setProfile(prev => ({\n                ...prev,\n                contactInfo: { ...prev.contactInfo, emergencyContact: e.target.value }\n              }))}\n              className=\"p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n          </div>\n          <div className=\"mt-4\">\n            <input\n              type=\"text\"\n              placeholder=\"Office Hours (e.g., Monday-Friday: 9:00 AM - 5:00 PM)\"\n              value={profile.contactInfo.officeHours}\n              onChange={(e) => setProfile(prev => ({\n                ...prev,\n                contactInfo: { ...prev.contactInfo, officeHours: e.target.value }\n              }))}\n              className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            />\n          </div>\n        </div>\n\n        {/* Settings */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n            <Settings className=\"h-5 w-5 mr-2\" />\n            Settings\n          </h2>\n          <div className=\"space-y-4\">\n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={profile.isAcceptingBookings}\n                onChange={(e) => setProfile(prev => ({ ...prev, isAcceptingBookings: e.target.checked }))}\n                className=\"rounded border-gray-300\"\n              />\n              <span>Currently accepting new bookings</span>\n            </label>\n            \n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={profile.emergencyAvailable}\n                onChange={(e) => setProfile(prev => ({ ...prev, emergencyAvailable: e.target.checked }))}\n                className=\"rounded border-gray-300\"\n              />\n              <span>Available for emergency consultations</span>\n            </label>\n\n            <div className=\"flex items-center space-x-4\">\n              <label className=\"text-sm font-medium text-gray-700\">Consultation Fee (₹):</label>\n              <input\n                type=\"number\"\n                value={profile.consultationFee}\n                onChange={(e) => setProfile(prev => ({ ...prev, consultationFee: parseInt(e.target.value) || 0 }))}\n                className=\"w-32 p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                min=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className=\"flex justify-end\">\n          <button\n            onClick={saveProfile}\n            disabled={saving}\n            className=\"flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n          >\n            <Save className=\"h-5 w-5 mr-2\" />\n            {saving ? 'Saving...' : 'Save Profile'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CounsellorProfileSetup;